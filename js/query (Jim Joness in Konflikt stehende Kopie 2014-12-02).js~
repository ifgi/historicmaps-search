

var endpoint = "http://data.uni-muenster.de/historicmaps/sparql";
var arrayCheckboxes = [];
var maxVal=0;
var minVal=0;

//var sparqlQueryExecute;

function setTemporalLimit(){

	var sparqlQuery = $.sparql("http://data.uni-muenster.de/historicmaps/sparql")
			  .prefix("maps","http://www.geographicknowledge.de/vocab/maps#")
			  .prefix("geo","http://www.opengis.net/ont/geosparql/1.0#")
			  .prefix("xsd","http://www.w3.org/2001/XMLSchema#")
			  .select(["(min(?year) as ?mindate)","(max(?year) as ?maxdate)"])
			  	.where("?map","a","maps:Map")
			  	.where("?map","maps:digitalImageVersion","?picture")
			  	.where("?map","maps:title","?title")
			  	.where("?map","maps:hasScale","?scale")
			  	.where("?map","maps:mapsArea","?area")
			  	.where("?map","maps:mapsTime","?time")
			  	.where("?time","xsd:gYear","?year")
			  	.where("?area","geo:asWKT","?wkt")
			  .orderby("?year").distinct();

	sparqlQueryJson(sparqlQuery.serialiseQuery(), endpoint, myCallbackTemporalConstraint, false);

}

function executeQuery() {

	var sparqlQuery = $.sparql("http://data.uni-muenster.de/historicmaps/sparql")
			  .prefix("maps","http://www.geographicknowledge.de/vocab/maps#")
			  .prefix("geo","http://www.opengis.net/ont/geosparql/1.0#")
			  .prefix("xsd","http://www.w3.org/2001/XMLSchema#")
			  .select(["?map", "?title", "?scale", "?wkt", "?picture", "?year"])
			  	.where("?map","a","maps:Map")
			  	.where("?map","maps:digitalImageVersion","?picture")
			  	.where("?map","maps:title","?title")
			  	.where("?map","maps:hasScale","?scale")
			  	.where("?map","maps:mapsArea","?area")
			  	.where("?map","maps:mapsTime","?time")
			  	.where("?time","xsd:gYear","?year")
			  	.where("?area","geo:asWKT","?wkt")
			  .orderby("?year").distinct();
			  //.limit(10);

	for(var i = 0; i<  arrayCheckboxes.length; i++) {
		
		sparqlQuery.where("?map","maps:mapsPhenomenon","?phenomenon"+i);			
		sparqlQuery.where("?phenomenon","a","<"+ arrayCheckboxes[i]+">");	

	}
	

	//sparqlQuery.filter("xsd:integer(?year) >= " + minVal + " && xsd:integer(?year) <= " + maxVal);
	
	//sparqlQueryExecute = sparqlQuery;
	
	sparqlQuery.filter("xsd:integer(?year) >= " + minVal + " && xsd:integer(?year) <= " + maxVal);

	//addTimeConstraint($("#slider").rangeSlider("values").min,$("#slider").rangeSlider("values").max);

	alert(sparqlQuery.serialiseQuery());
	sparqlQueryJson(sparqlQuery.serialiseQuery(), endpoint, myCallback, false);

}

//function addTimeConstraint(valMin,valMax){

//	sparqlQueryExecute.filter("xsd:integer(?year) >= " + valMin + " && xsd:integer(?year) <= " + valMax );
//	console.log(sparqlQueryExecute.serialiseQuery());
//}


function sparqlQueryJson(queryStr, endpoint, callback, isDebug) {

	var querypart = "query=" + escape(queryStr);

	// Get our HTTP request object.
	var xmlhttp = null;

	if(window.XMLHttpRequest) {
		xmlhttp = new XMLHttpRequest();
	} else if(window.ActiveXObject) {
		// Code for older versions of IE, like IE6 and before.
		xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	} else {
		alert('Perhaps your browser does not support XMLHttpRequests?');
}


	// Set up a POST with JSON result format.
	xmlhttp.open('POST', endpoint, true); // GET can have caching probs, so POST
	xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
	xmlhttp.setRequestHeader("Accept", "application/sparql-results+json");


	// Set up callback to get the response asynchronously.
	xmlhttp.onreadystatechange = function() {

	if(xmlhttp.readyState == 4) {
		if(xmlhttp.status == 200) {
			   // Do something with the results
			   if(isDebug) alert(xmlhttp.responseText);
				   callback(xmlhttp.responseText);
			 } else {
				   // Some kind of error occurred.
				   alert("Sparql query error: " + xmlhttp.status + " " + xmlhttp.responseText);
	 	}
	}
};

// Send the query to the endpoint.
xmlhttp.send(querypart);

};


// Define a callback function to receive the SPARQL JSON result.
function myCallback(str) {

	// Convert result to JSON
	var jsonObj = eval('(' + str + ')');
	
	$("#result").html("");

	$("#result").append('<ul style="list-style-type:none">');
	for(var i = 0; i<  jsonObj.results.bindings.length; i++) {


		//Creates list item.
		if (typeof jsonObj.results.bindings[i].map !== 'undefined') {

			$("#result").append('<li>');			

			$("#result").append('<a href=' + jsonObj.results.bindings[i].picture.value +'><img src="'+
			jsonObj.results.bindings[i].picture.value+'" alt="'+jsonObj.results.bindings[i].title.value+'" width="82" height="82"></a><br><a href=' + jsonObj.results.bindings[i].map.value +'>' + jsonObj.results.bindings[i].title.value + '</a><br>' + jsonObj.results.bindings[i].scale.value + '<br>' + jsonObj.results.bindings[i].year.value + '<br>');

			$("#result").append('</li>');
		}
	  

	}

	$("#result").append('</ul>');     
}










function myCallbackTemporalConstraint(str) {

	// Convert result to JSON
	var jsonObj = eval('(' + str + ')');
	
	
	for(var i = 0; i<  jsonObj.results.bindings.length; i++) {
		
		minVal = parseInt(jsonObj.results.bindings[i].mindate.value);
		maxVal = parseInt(jsonObj.results.bindings[i].maxdate.value);


		setSliderRange(parseInt(jsonObj.results.bindings[i].mindate.value), parseInt(jsonObj.results.bindings[i].maxdate.value), parseInt(jsonObj.results.bindings[i].mindate.value), parseInt(jsonObj.results.bindings[i].maxdate.value));

	}
	
	executeQuery();

}


