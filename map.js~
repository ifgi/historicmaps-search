function init() {
    var map = L.map('map').setView([0, 0], 4);
    // add an OpenStreetMap tile layer
	L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
		attribution: '&amp;copy; &lt;a href="http://osm.org/copyright"&gt;OpenStreetMap&lt;/a&gt; contributors'
	}).addTo(map);
    
    var info = L.control();

	info.onAdd = function (map) {
	    this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
	    this.update();
	    return this._div;
	};

	// method that we will use to update the control based on feature properties passed
	info.update = function () {
		var bounds = map.getBounds();
	    this._div.innerHTML = '<h4>BoundingBox</h4><hr><h5>NE:'
	    	+bounds._northEast+'</h5><br/><h5>NE:'
	    	+bounds._southWest+'</h5>';
	};

	info.addTo(map);

	function updateBBox() {
		info.update();
	}

	map.on('drag', updateBBox);
	map.on('zoomend', updateBBox)




function getRdfClasses(rdfTxt){
var rdfClasses = rdfTxt.getElementsByTagName("owl:Class");
var classArray = new Array();
for(var i = 0 ; i < rdfClasses.length; i++){
var uri = rdfClasses[i].getAttribute("rdf:about");
var tmp = new Object();
tmp.type = "Class";
tmp.uri = uri;
tmp.name = getLastStringAfterHash(uri);
var childNodes = rdfClasses[i].childNodes;
var tmpParents = new Array();
for(var j = 0 ; j < childNodes.length; j++){
if(childNodes[j].nodeName == "rdfs:subClassOf"){
//alert(tmp.name + " - " + childNodes[j].getAttribute("rdf:resource"));
tmpParents.push(childNodes[j].getAttribute("rdf:resource"));
}
}
tmp.parents = tmpParents;
tmp.children = new Array();
classArray.push(tmp);
}
getChildrenClasses(classArray);
return classArray;
}




}

	




